@inject HttpClient HttpClient

@page "/stats"
@using Dashboard.Models

<h1>Stats</h1>

<DateRangePicker @bind-StartDate="StartDate" @bind-EndDate="EndDate" OnRangeSelect="OnRangeSelect" MaxDate="DateTimeOffset.Now.AddDays(1)"/>

<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>

<p>Benef: @ReturnAmount</p>
<BarChart @ref="BarChart" TItem="double" />

@code{
    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddMonths(-1);
    DateTimeOffset? EndDate { get; set; } = DateTime.Today;

    BarChart<double> BarChart { get; set; }
    Dictionary<DateTime, decimal?> returnByDay = new Dictionary<DateTime, decimal?>();

    decimal ReturnAmount { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    public async void OnRangeSelect(DateRange range)
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        await GetBets();
        await HandleRedraw();
        this.StateHasChanged();
    }

    private async Task GetBets()
    {
        returnByDay.Clear();
        var uri = $"bet?startDate={StartDate.Value.Date.ToString("yyyy-MM-dd")}&endDate={EndDate.Value.Date.ToString("yyyy-MM-dd")}";
        ReturnAmount = 0;
        var bets = await HttpClient.GetJsonAsync<List<BetDto>>(uri);
        var betsByDays = bets.GroupBy(_ => _.Date.Date);
        foreach (var betByDay in betsByDays)
        {
            var amount = betByDay.Sum(_ => _.Benefits);
            returnByDay[betByDay.Key] = amount;
            ReturnAmount += amount.Value;
        }
        Console.WriteLine(ReturnAmount);
    }

    async Task HandleRedraw()
    {
        BarChart.Clear();

        BarChart.AddLabel(returnByDay.Keys.Select(_=>_.ToString()).ToArray());

        BarChart.AddDataSet(GetLineChartDataset());

        await BarChart.Update();
    }

    BarChartDataset<double> GetLineChartDataset()
    {
        return new BarChartDataset<double>
        {
            Data = returnByDay.Select(_=>(double)_.Value).ToList()
        };
    }
}